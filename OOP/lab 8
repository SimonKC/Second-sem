QN1) 
#include<iostream>
using namespace std;
class person
{
public:
int age;
char name[20];
public:
void read_age()
{
cout<<"Enter age:"<<endl;
cin>>age;
}
void read_name()
{
cout<<"Enter name:"<<endl;
cin>>name;
}
void display()
{
cout<<"Name:"<<name<<endl<<"Age:"<<age<<endl;
}

};
class student :public person
{
int serial_no,percentage;
public:
person p;

void read_serial_no()
{
p.read_name();
p.read_age();
cout<<"Enter serial no:"<<endl;
cin>>serial_no;
}
void read_percentage()
{
cout<<"Enter percentage:"<<endl;
cin>>percentage;
}
void information()
{

p.display();
cout<<"Serial No."<<serial_no<<endl;
if (percentage>=80)
{
cout<<"outstanding"<<endl;
}
else if(percentage>=70)
{
cout<<"medium"<<endl;
}
else
{
cout<<"poor"<<endl;
}

}
};
int main()
{
student s1;


s1.read_serial_no();
s1.read_percentage();
s1.information();
}


QN2)

//Write three derived classes inheriting functionality of base class person (should have a member
//function that asks to enter name and age) and with added unique features of student, and employee,
//and functionality to assign, change and delete records of student and employee. And make one member
//function for printing address of the objects of classes (base and derived) using this pointer. 
//Create two objects of base class and derived classes each and print the addresses of individual 
//objects. Using calculator, calculate the address space occupied by each object and verify this with 
//address spaces printed by the program.
#include<iostream>
using namespace std;
class person
{
public:
char name[20];
int age;
void getdata()
{
    cout<<"Enter name and age :"<<endl;
    cin>>name>>age;
}
void display()
{
    cout<<"Name :"<<name<<endl<<"Age :"<<age<<endl;
}

};
class student : public person
{
public :
person p1;
char d;
void delet_data()
{
    cout<<"Student Info :"<<endl;
    p1.getdata();
    p1.display();
    cout<<"Do you want to delete :"<<endl;
    cin>>d;
    if (d=='Y'||d=='y')
    {
        cout<<"New :"<<endl;
        p1.getdata();
        p1.display();
     
    }
    else 
    {
        p1.display();
    }
}
};
int main()
{
    system("cls");
   student p[10];
   int n,i;
   cout<<"enter how many no :"<<endl;
   cin>>n;
   for(i=1;i<=n;i++)
   {
    p[i].delet_data();
   }
   
    

}





#include<iostream>
using namespace std;
class complex1
{
    protected:
        int real1, imag1;
    public:
        void get_data()
        {
            cout<<"Enter the complex number of base class: "<<endl;
            cout<<"Enter the real part: ";
            cin>>real1;
            cout<<"Enter the imaginary part: ";
            cin>>imag1;
        }
        void show_data()
        {
          cout<<real1<<" + i"<<imag1;
        }
};
class complex2: public complex1
{
    private:
        int real1, imag1;
    public:
        void get_data()
        {
            complex1::get_data();
            cout<<"\nEnter the complex number for derived class: "<<endl;
            cout<<"Enter real part: ";
            cin>>real1;
            cout<<"Enter imaginary part: ";
            cin>>imag1;
        }
        complex2 adds(void)
        {
            complex2 temp;
            temp.real1 = real1 + complex1::real1;
            temp.imag1 = imag1 + complex1::imag1;
            return temp;
        }
        void show_data()
        {
            cout<<real1<<" + j"<<imag1;
        }
        friend class complex3;
};
class complex3
{
    private:
     int real, imag;
    public:
        void get_data()
        {
            cout<<"\nEnter the complex for friend class: "<<endl;
            cout<<"Enter real part: ";
            cin>>real;
            cout<<"Enter imaginary part: ";
            cin>>imag;
        }
        complex3 subtract(complex2 c)
        {
            complex3 temp;
            temp.real = real - c.complex1::real1;
            temp.imag = imag - c.complex1::imag1;
            return temp;
        }
        void display()
        {
            cout<<real<<" + j"<<imag;
        }
};
int main()
{
    complex2 c,d;
    complex3 e, f;
    c.get_data();
    d = c.adds();
    cout<<"After addition the result is : "<<endl;
    d.show_data();
    cout<<endl;
    f.get_data();
    e = f.subtract(c);
    cout<<"After subtraction the result is : "<<endl;
    e.display();
}
